import{d as n}from"./app.de733250.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const a={},p=n(`<h1 id="\u5206\u800C\u6CBB\u4E4B" tabindex="-1"><a class="header-anchor" href="#\u5206\u800C\u6CBB\u4E4B" aria-hidden="true">#</a> \u5206\u800C\u6CBB\u4E4B</h1><p>\u5C31\u662F\u5C06\u89C4\u6A21\u5E9E\u5927\u7684\u95EE\u9898\u5206\u89E3\u4E3A\u82E5\u5E72\u89C4\u6A21\u66F4\u5C0F\u7684\u5B50\u95EE\u9898\uFF0C\u518D\u901A\u8FC7\u9012\u5F52\u673A\u5236\u5206\u522B\u6C42\u89E3\u3002\u8FD9\u79CD\u5206\u89E3\u6301\u7EED\u8FDB\u884C\uFF0C\u76F4\u5230\u5B50\u95EE\u9898\u89C4\u6A21\u7F29\u51CF\u81F3\u5E73\u51E1\u7684\u60C5\u51B5\u3002\u8FD9\u5C31\u662F\u6240\u8C13\u7684\u5206\u800C\u6CBB\u4E4B\uFF08divide-and-conquer\uFF09\u7B56\u7565\u3002</p><h2 id="\u6570\u7EC4\u6C42\u548C" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4\u6C42\u548C" aria-hidden="true">#</a> \u6570\u7EC4\u6C42\u548C</h2><ul><li><p>\u666E\u901A\u8FED\u4EE3</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> total <span class="token operator">+=</span> A<span class="token punctuation">[</span>low<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>\u4E8C\u5206\u9012\u5F52</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">==</span> high<span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> low<span class="token punctuation">,</span> middle<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u9012\u63A8\u5173\u7CFB\uFF1A</p><p>\u200B T(n) = 2 * T(n/2) + O(1)</p><p>\u200B T(1) = O(1)</p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/Xrisf8-q6fpjA.png" style="zoom:50%;"></li></ul><h2 id="master-theorem" tabindex="-1"><a class="header-anchor" href="#master-theorem" aria-hidden="true">#</a> Master Theorem</h2><p>\u5206\u6CBB\u7B56\u7565\u5BF9\u5E94\u7684\u9012\u63A8\u5F0F\uFF0C\u901A\u5E38\uFF08\u5C3D\u91CF\u4E0D\u603B\u662F\uFF09\u5F62\u5982\uFF1A</p><p>\u200B <img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/heHJWM-NI4hWl.png" style="zoom:50%;"></p><p>(\u539F\u95EE\u9898\u88AB\u5206\u4E3Aa\u4E2A\u89C4\u6A21\u5747\u4E3An/b\u7684\u5B50\u4EFB\u52A1\uFF1B \u4EFB\u52A1\u7684\u5212\u5206\u3011\u89E3\u7684\u5408\u5E76\u8017\u65F6f(n))</p><p>\u5206\u4E09\u79CD\u60C5\u51B5\uFF1A</p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/0FF2X1-C3X5cR.png" style="zoom:25%;"><p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/BOrN0A-jZ22qc.png" alt=""></p>`,11);function t(e,o){return p}var r=s(a,[["render",t]]);export{r as default};
