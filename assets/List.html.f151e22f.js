import{d as s}from"./app.de733250.js";import{_ as n}from"./plugin-vue_export-helper.5a098b48.js";const a={},p=s(`<h1 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h1><h2 id="list-adt-\u63A5\u53E3" tabindex="-1"><a class="header-anchor" href="#list-adt-\u63A5\u53E3" aria-hidden="true">#</a> List ADT \u63A5\u53E3</h2><table><thead><tr><th>\u64CD\u4F5C\u63A5\u53E3</th><th>\u529F\u80FD</th><th>\u9002\u7528\u5BF9\u8C61</th></tr></thead><tbody><tr><td>size()</td><td>\u8282\u70B9\u603B\u6570</td><td>List</td></tr><tr><td>first(), last()</td><td>\u8FD4\u56DE\u9996\u3001\u672B\u8282\u70B9\u4F4D\u7F6E</td><td>List</td></tr><tr><td>InsertAsFirst(e), InsertAsLast(e)</td><td>\u5C06e\u5F53\u4F5C\u9996\u3001\u672B\u8282\u70B9\u63D2\u5165</td><td>List</td></tr><tr><td>insertA(p, e), insertB(p, e)</td><td>\u5C06e\u5F53\u4F5C\u8282\u70B9p\u7684\u76F4\u63A5\u540E\u7EE7\u3001\u524D\u9A71\u63D2\u5165</td><td>List</td></tr><tr><td>remove(p)</td><td>\u5220\u9664\u4F4D\u7F6Ep\u5904\u7684\u8282\u70B9\uFF0C\u8FD4\u56DE\u5176\u6570\u503C</td><td>List</td></tr><tr><td>isDisordered()</td><td>\u5224\u65AD\u6240\u6709\u8282\u70B9\u662F\u5426\u5DF2\u6309\u975E\u964D\u5E8F\u6392\u5217</td><td>List</td></tr><tr><td>sort()</td><td>\u8C03\u6574\u5404\u8282\u70B9\u7684\u4F4D\u7F6E\uFF0C\u4F7F\u4E4B\u6309\u975E\u964D\u5E8F\u6392\u5217</td><td>List</td></tr><tr><td>find(e)</td><td>\u67E5\u627E\u76EE\u6807\u5143\u7D20e\uFF0C\u5931\u8D25\u65F6\u8FD4\u56DENULL</td><td>List</td></tr><tr><td>search(e)</td><td>\u67E5\u627E\u76EE\u6807\u5143\u7D20e\uFF0C\u8FD4\u56DE\u4E0D\u5927\u4E8Ee\u4E14\u7D22\u5F15\u6700\u5927\u7684\u8282\u70B9</td><td>\u6709\u5E8FLIst</td></tr><tr><td>deduplicate()</td><td>\u5254\u9664\u91CD\u590D\u8282\u70B9</td><td>List</td></tr><tr><td>uniquify()</td><td>\u5254\u9664\u91CD\u590D\u8282\u70B9</td><td>\u6709\u5E8FLIst</td></tr><tr><td>traverse()</td><td>\u904D\u5386\u5E76\u7EDF\u4E00\u5904\u7406\u6240\u6709\u8282\u70B9\uFF0C\u5904\u7406\u65B9\u6CD5\u6709\u51FD\u6570\u5BF9\u8C61\u6307\u5B9A</td><td>List</td></tr></tbody></table><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_A_LITTLE_THING_LIST_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef&gt;</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
  T data<span class="token punctuation">;</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> pred<span class="token punctuation">;</span>  <span class="token comment">// \u524D\u9A71</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> succ<span class="token punctuation">;</span>  <span class="token comment">// \u540E\u9A71</span>
  <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">ListNode</span><span class="token punctuation">(</span>T e<span class="token punctuation">,</span> ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pred</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">succ</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">insertAsPred</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">insertAsSucc</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> _size<span class="token punctuation">;</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> header<span class="token punctuation">;</span>   <span class="token comment">// \u5934\u54E8\u5175</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> trailer<span class="token punctuation">;</span>  <span class="token comment">// \u5C3E\u54E8\u5175</span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token function">List</span><span class="token punctuation">(</span><span class="token keyword">const</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">List</span><span class="token punctuation">(</span><span class="token keyword">const</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u590D\u5236\u5217\u8868L\u4E2D\u81EA\u7B2Cidx\u9879\u8D77\u7684n\u9879</span>
  <span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _size<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> header<span class="token operator">-&gt;</span>succ<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> trailer<span class="token operator">-&gt;</span>pred<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">isDisordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token comment">// \u65E0\u5E8F\u5217\u8868\u67E5\u627E</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token comment">// \u6709\u5E8F\u5217\u8868\u67E5\u627E</span>

  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">insertAsFirst</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u8BB2e\u5F53\u4F5C\u9996\u8282\u70B9\u63D2\u5165</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">insertAsLast</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">insertA</span><span class="token punctuation">(</span>ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u8BB2e\u5F53\u4F5Cp\u7684\u540E\u7EE7\u63D2\u5165</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> <span class="token function">insertB</span><span class="token punctuation">(</span>ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u8BB2e\u5F53\u4F5Cp\u7684\u524D\u9A71\u63D2\u5165</span>

  T <span class="token function">remove</span><span class="token punctuation">(</span>ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u5217\u8868\u533A\u95F4\u6392\u5E8F</span>
  <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">int</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token function">uniquify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u6709\u5E8F\u53BB\u91CD</span>
  <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u524D\u540E\u5012\u7F6E</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">ListNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  trailer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">ListNode</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  header<span class="token operator">-&gt;</span>succ <span class="token operator">=</span> trailer<span class="token punctuation">;</span>
  header<span class="token operator">-&gt;</span>pred <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  trailer<span class="token operator">-&gt;</span>pred <span class="token operator">=</span> header<span class="token punctuation">;</span>
  trailer<span class="token operator">-&gt;</span>succ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  _size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
T<span class="token operator">&amp;</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  ListNode<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>succ<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><h2 id="list\u5BF9\u8C61\u5185\u90E8\u7EC4\u6210\u53CA\u903B\u8F91\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#list\u5BF9\u8C61\u5185\u90E8\u7EC4\u6210\u53CA\u903B\u8F91\u7ED3\u6784" aria-hidden="true">#</a> List\u5BF9\u8C61\u5185\u90E8\u7EC4\u6210\u53CA\u903B\u8F91\u7ED3\u6784</h2><p><img src="https://cdn.jsdelivr.net/gh/CarberryChai/oss@master/image/3NNBHR-uKX6Py.png" alt=""></p>`,6);function t(o,e){return p}var r=n(a,[["render",t]]);export{r as default};
